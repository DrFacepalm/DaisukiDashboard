{"version":3,"sources":["utils/LocalStorageHook.ts","components/settings/SettingsDialog.tsx","themes/ThemeProvider.tsx","components/nivo/LineGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","useState","storedValue","setStoredValue","useEffect","handleStorageChange","addEventListener","removeEventListener","value","newValue","Function","setItem","stringify","dispatchEvent","Event","SettingsDialog","open","setOpen","theme","handleChange","Dialog","onClose","scroll","fullWidth","maxWidth","DialogTitle","Typography","variant","color","DialogContent","dividers","DialogContentText","Select","onChange","themesList","sort","lhs","rhs","name","map","MenuItem","style","textColor","background","bgColor","Link","href","DialogActions","Button","onClick","themes","get","getComputedStyle","document","documentElement","getPropertyValue","trim","MyThemeProvider","children","themeString","GlobalStyle","createGlobalStyle","React","createMuiTheme","setTheme","useLayoutEffect","log","Object","entries","setProperty","set","cssTheme","palette","primary","main","contrastText","default","paper","secondary","warning","info","text","disabled","hint","ThemeProvider","fontSize","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","StyledToolTip","styled","Card","CustomTooltip","point","CardContent","serieColor","serieId","data","yFormatted","xFormatted","LineGraph","colors","height","animate","useMesh","margin","top","right","bottom","left","xScale","format","type","xFormat","yScale","stacked","min","max","curve","tooltip","axisTop","axisRight","axisBottom","legend","legendOffset","legendPosition","axisLeft","tickSize","tickPadding","tickRotation","pointColor","from","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","pointLabelYOffset","Header","div","StyledBackground","StyledContainer","Container","App","myData","chartData","setChartData","fromEntries","id","checked","setChecked","idToIndex","index","originalColors","a","length","slice","repeats","Math","ceil","Array","flat","fillRepeatArray","setColors","handleCheck","event","target","filter","_","elevation","Grid","container","direction","alignContent","alignItems","spacing","FormGroup","row","FormControlLabel","control","Checkbox","label","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.488993c1.chunk.js","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T | (() => T),\n): [T, Dispatch<SetStateAction<T>>] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = () => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue\n    }\n\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error)\n      return initialValue\n    }\n  }\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue)\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: Dispatch<SetStateAction<T>> = value => {\n    // Prevent build error \"window is undefined\" but keeps working\n    if (typeof window == 'undefined') {\n      console.warn(\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\n      )\n    }\n\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(newValue))\n\n      // Save state\n      setStoredValue(newValue)\n\n      // We dispatch a custom event so every useLocalStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'))\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error)\n    }\n  }\n\n  useEffect(() => {\n    setStoredValue(readValue())\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue())\n    }\n\n    // this only works for other documents, not the current one\n    window.addEventListener('storage', handleStorageChange)\n\n    // this is a custom event, triggered in writeValueToLocalStorage\n    window.addEventListener('local-storage', handleStorageChange)\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange)\n      window.removeEventListener('local-storage', handleStorageChange)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n","import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  DialogActions,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n  Typography,\n} from \"@material-ui/core\";\n\nimport themesList from \"../../themes/_list.json\";\n\ntype SettingsDialogProps = {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  theme: string;\n  handleChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n};\n\ntype themesType = {\n  name: string;\n  bgColor: string;\n  textColor: string;\n};\n\nconst SettingsDialog = ({\n  open,\n  setOpen,\n  theme,\n  handleChange,\n}: SettingsDialogProps) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n      scroll={\"body\"}\n      fullWidth={true}\n      maxWidth={\"md\"}\n    >\n      <DialogTitle>\n        <Typography variant=\"h5\" color=\"primary\">\n          Settings\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers={true}>\n        <DialogContentText>\n          <Typography variant=\"h6\" color=\"primary\">\n            About us:\n          </Typography>\n          <Typography>\n            Daisuki Dashboard is an open source project aiming to bring more\n            statistics and data to the Daisuki Discord Bot game.\n          </Typography>\n          <Typography variant=\"h6\" color=\"primary\">\n            Select Theme:\n          </Typography>\n          <Select value={theme} onChange={handleChange}>\n            {themesList\n              .sort((lhs: themesType, rhs: themesType) =>\n                lhs.name > rhs.name ? 1 : rhs.name > lhs.name ? -1 : 0\n              )\n              .map((theme: themesType) => (\n                <MenuItem\n                  style={{ color: theme.textColor, background: theme.bgColor }}\n                  value={theme.name}\n                >\n                  {theme.name}\n                </MenuItem>\n              ))}\n          </Select>\n          <Typography variant=\"h6\" color=\"primary\">\n            Creators:\n          </Typography>\n          <ul>\n            <li>\n              <Typography>\n                <Link href=\"https://github.com/xpire\">xpire</Link>\n              </Typography>\n            </li>\n            <li>\n              <Typography>\n                <Link href=\"https://github.com/DrFacepalm\">DrFacepalm</Link>\n              </Typography>\n            </li>\n          </ul>\n          <Typography variant=\"h6\" color=\"primary\">\n            Source:\n          </Typography>\n          <Typography>\n            <Link href=\"https://github.com/DrFacepalm/DaisukiDashboard\">\n              https://github.com/DrFacepalm/DaisukiDashboard\n            </Link>\n          </Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setOpen(false)}>Exit</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SettingsDialog;\n","import React, { useLayoutEffect } from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { createGlobalStyle } from \"styled-components\";\nimport useLocalStorage from \"../utils/LocalStorageHook\";\nimport rawThemes from \"./themes.json\";\n\ntype MyThemeProviderProps = {\n  children?: React.ReactNode;\n  themeString: string;\n};\n\ntype themeType = {\n  \"--bg-color\"?: string;\n  \"--main-color\"?: string;\n  \"--caret-color\"?: string;\n  \"--sub-color\"?: string;\n  \"--text-color\"?: string;\n  \"--error-color\"?: string;\n  \"--error-extra-color\"?: string;\n  \"--colorful-error-color\"?: string;\n  \"--colorful-error-extra-color\"?: string;\n};\n\nconst themes: {\n  [key: string]: themeType;\n} = rawThemes;\n\nconst get = (key: string) =>\n  getComputedStyle(document.documentElement).getPropertyValue(key).trim();\n\nconst set = (key: string, value: string) =>\n  document.documentElement.style.setProperty(key, value);\n\nconst MyThemeProvider = ({ children, themeString }: MyThemeProviderProps) => {\n  const GlobalStyle = createGlobalStyle`\n    html {\n        --bg-color: #323437;\n        --main-color: #e2b714;\n        --caret-color: #e2b714;\n        --sub-color: #646669;\n        --text-color: #d1d0c5;\n        --error-color: #ca4754;\n        --error-extra-color: #7e2a33;\n        --colorful-error-color: #ca4754;\n        --colorful-error-extra-color: #7e2a33;\n        transition-duration: 1s;\n    }\n    \n    body {\n      background: var(--bg-color);\n    }\n  `;\n  const [theme, setTheme] = React.useState(createMuiTheme());\n\n  useLayoutEffect(() => {\n    // set the theme based on themeString\n    console.log(\"setting theme to\", themeString);\n    themes[themeString] &&\n      Object.entries(themes[themeString]).map((value: [string, string]) =>\n        set(value[0], value[1])\n      );\n\n    const cssTheme = createMuiTheme({\n      palette: {\n        primary: {\n          main: get(\"--main-color\"),\n          contrastText: get(\"--text-color\"),\n        },\n        background: {\n          default: get(\"--bg-color\"),\n          paper: get(\"--bg-color\"),\n        },\n        secondary: {\n          main: get(\"--caret-color\"),\n          contrastText: get(\"--text-color\"),\n        },\n        error: {\n          main: get(\"--error-color\"),\n          contrastText: get(\"--text-color\"),\n        },\n        warning: {\n          main: get(\"--colorful-error-color\"),\n          contrastText: get(\"--text-color\"),\n        },\n        info: {\n          main: get(\"--colorful-error-color\"),\n          contrastText: get(\"--text-color\"),\n        },\n        text: {\n          primary: get(\"--text-color\"),\n          secondary: get(\"--sub-color\"),\n          disabled: get(\"--sub-color\"),\n          hint: get(\"--sub-color\"),\n        },\n      },\n    });\n\n    setTheme(cssTheme);\n  }, [themeString]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle /> {children}\n    </ThemeProvider>\n  );\n};\n\nexport default MyThemeProvider;\n","import { ResponsiveLine, PointTooltip, Point } from \"@nivo/line\";\nimport { Tooltip } from \"@nivo/tooltip\";\nimport styled from \"styled-components\";\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\nexport type LineGraphData = {\n  id: string;\n  data: LineGraphDataPoint[];\n};\n\nexport type LineGraphDataPoint = {\n  x: string;\n  y: number;\n};\n\nconst theme = {\n  background: \"var(--bg-color)\",\n  textColor: \"var(--main-color)\",\n  fontSize: 16,\n  axis: {\n    domain: {\n      line: {\n        stroke: \"var(--sub-color)\",\n        strokeWidth: 1,\n      },\n    },\n    ticks: {\n      line: {\n        stroke: \"var(--sub-color)\",\n        strokeWidth: 1,\n      },\n    },\n  },\n  grid: {\n    line: {\n      stroke: \"var(--sub-color)\",\n      strokeWidth: 1,\n    },\n  },\n  crosshair: {\n    line: {\n      stroke: \"var(--sub-color)\",\n    },\n  },\n};\n\nconst StyledToolTip = styled(Card)`\n  background: var(--bg-color);\n  color: var(--main-color);\n  // pointer-events: none;\n  // width: 200px;\n  // height: 100px;\n`;\nconst CustomTooltip: PointTooltip = ({ point }: { point: Point }) => (\n  <StyledToolTip>\n    <CardContent>\n      <Typography>\n        <span style={{ color: point.serieColor }}>[</span>\n        {point.serieId}\n        <span style={{ color: point.serieColor }}>]</span>\n      </Typography>\n      <Typography variant=\"h5\">{point.data.yFormatted}</Typography>\n      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n        {point.data.xFormatted}\n      </Typography>\n      {/* {point.y} */}\n    </CardContent>\n  </StyledToolTip>\n  // <></>\n);\n\nconst LineGraph = ({\n  data,\n  colors,\n}: {\n  data: LineGraphData[];\n  colors: string[];\n}) => {\n  return (\n    <div style={{ height: \"70vh\" }}>\n      <ResponsiveLine\n        data={data}\n        animate={true}\n        useMesh={true}\n        // enableSlices={\"x\"}\n        // enableCrosshair={true}\n        // debugMesh={true}\n        margin={{ top: 50, right: 50, bottom: 50, left: 50 }}\n        xScale={{ format: \"%Y-%m-%dT%H:%M:%S.%L\", type: \"time\" }}\n        xFormat=\"time:%Y-%m-%d (%H:%M:%S)\"\n        yScale={{ type: \"linear\", stacked: false, min: 0, max: \"auto\" }}\n        curve=\"natural\"\n        theme={theme}\n        tooltip={CustomTooltip}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          // tickValues: \"every 1 day\",\n          // tickSize: 5,\n          // tickPadding: 5,\n          // tickRotation: 30,\n          format: \"%y-%m-%d\",\n          legend: \"Time\",\n          legendOffset: 40,\n          legendPosition: \"middle\",\n        }}\n        axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          format: \"\",\n          legend: \"Score\",\n          legendOffset: -65,\n          legendPosition: \"middle\",\n        }}\n        // colors={{ scheme: \"spectral\" }}\n        // colors={[\"#03C8B1\", \"#5AA8FF\", \"#D44086\", \"#EC9936\", \"#FFCC00\"]}\n        colors={colors}\n        pointColor={{ from: \"color\" }}\n        pointBorderWidth={1}\n        pointBorderColor={{ from: \"serieColor\" }}\n        enablePointLabel={false}\n        pointLabel=\"xFormatted\"\n        pointLabelYOffset={-12}\n      />\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { default as myData } from \"./data/data.json\";\nimport {\n  Typography,\n  Container,\n  Card,\n  Grid,\n  Button,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\nimport useLocalStorage from \"./utils/LocalStorageHook\";\nimport SettingsDialog from \"./components/settings/SettingsDialog\";\nimport ThemeProvider from \"./themes/ThemeProvider\";\nimport LineGraph, { LineGraphData } from \"./components/nivo/LineGraph\";\nimport BumpGraph from \"./components/nivo/BumpGraph\";\n\nconst Header = styled.div`\n  padding: 40px 0px;\n`;\n\nconst StyledBackground = styled.div`\n  background: var(--bg-color);\n  min-height: 100vh;\n  max-width: 100vw;\n`;\n\nconst StyledContainer = styled(Container)`\n  overflow-x: clip;\n`;\n\nfunction App() {\n  const [theme, setTheme] = useLocalStorage(\"theme\", \"8008\");\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTheme(event.target.value as string);\n  };\n  const [open, setOpen] = useState(false);\n  const [chartData, setChartData] = useState(myData);\n  const [checked, setChecked] = useState(\n    Object.fromEntries(myData.map(({ id }) => [id, true]))\n  );\n  const idToIndex = Object.fromEntries(\n    myData.map(({ id }, index) => [id, index])\n  );\n\n  const fillRepeatArray = (a: string[], length: number) => {\n    if (a.length >= length) {\n      return a.slice(0, length);\n    } else {\n      const repeats = Math.ceil(length / a.length);\n      return Array.from({ length: repeats }, () => a)\n        .flat()\n        .slice(0, length);\n    }\n  };\n\n  const originalColors = fillRepeatArray(\n    [\n      \"#9e0142\",\n      \"#d53e4f\",\n      \"#f46d43\",\n      \"#fdae61\",\n      \"#fee08b\",\n      \"#ffffbf\",\n      \"#e6f598\",\n      \"#abdda4\",\n      \"#66c2a5\",\n      \"#3288bd\",\n      \"#5e4fa2\",\n    ], // from nivo colors \"spectral\"\n    myData.length\n  );\n\n  const [colors, setColors] = useState(originalColors);\n\n  const handleCheck = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked({ ...checked, [event.target.name]: event.target.checked });\n    console.log(event.target.name, event.target.checked);\n  };\n\n  useEffect(() => {\n    setChartData(myData.filter(({ id }) => checked[id]));\n    setColors(originalColors.filter((_, index) => checked[myData[index].id]));\n  }, [checked]);\n  return (\n    <ThemeProvider themeString={theme}>\n      <StyledBackground>\n        <SettingsDialog\n          open={open}\n          setOpen={setOpen}\n          theme={theme}\n          handleChange={handleChange}\n        />\n        <StyledContainer maxWidth=\"xl\">\n          <Header>\n            <Card elevation={0}>\n              <Grid\n                container\n                direction=\"row\"\n                alignContent=\"space-between\"\n                alignItems=\"flex-end\"\n                spacing={2}\n              >\n                <Grid item>\n                  <Typography variant=\"h3\">Daisuki Dashboard</Typography>\n                </Grid>\n                <Grid item>\n                  <Button onClick={() => setOpen(true)}>Settings</Button>\n                </Grid>\n              </Grid>\n              <Typography variant=\"subtitle1\">\n                Custom Dashboard for Daisuki, The Ultimate Character Collection\n                Game!\n              </Typography>\n            </Card>\n          </Header>\n          <Card elevation={0}>\n            <FormGroup row>\n              {myData.map(({ id }) => (\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={checked[id]}\n                      onChange={handleCheck}\n                      name={id}\n                      style={{ color: originalColors[idToIndex[id]] }}\n                    />\n                  }\n                  label={<Typography>{id}</Typography>}\n                />\n              ))}\n            </FormGroup>\n          </Card>\n          <LineGraph data={chartData} colors={colors} />\n          <Card elevation={0}></Card>\n        </StyledContainer>\n      </StyledBackground>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}