{"version":3,"sources":["themes/ThemeProvider.tsx","components/nivo/LineGraph.tsx","components/settings/SettingsDialog.tsx","utils/fillRepeatArray.ts","utils/LocalStorageHook.ts","utils/filterClusters.ts","utils/sleep.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["themes","rawThemes","get","key","getComputedStyle","document","documentElement","getPropertyValue","trim","MyThemeProvider","children","themeString","GlobalStyle","createGlobalStyle","React","useState","createMuiTheme","theme","setTheme","useLayoutEffect","Object","entries","map","value","style","setProperty","set","cssTheme","palette","primary","main","contrastText","background","default","paper","secondary","error","warning","info","text","disabled","hint","ThemeProvider","textColor","fontSize","axis","domain","line","stroke","strokeWidth","ticks","grid","crosshair","StyledToolTip","styled","Card","CustomTooltip","point","CardContent","Typography","color","serieColor","serieId","variant","data","yFormatted","xFormatted","LineGraph","colors","height","animate","useMesh","margin","top","right","bottom","left","xScale","format","type","xFormat","yScale","stacked","min","max","curve","tooltip","axisTop","axisRight","axisBottom","legend","legendOffset","legendPosition","axisLeft","tickSize","tickPadding","tickRotation","pointColor","from","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","pointLabelYOffset","SettingsDialog","open","setOpen","handleChange","Dialog","onClose","scroll","fullWidth","maxWidth","DialogTitle","DialogContent","dividers","DialogContentText","Select","onChange","themesList","sort","lhs","rhs","name","MenuItem","bgColor","Link","href","DialogActions","Button","onClick","fillRepeatArray","a","length","slice","repeats","Math","ceil","Array","flat","useLocalStorage","initialValue","readValue","window","item","localStorage","getItem","JSON","parse","console","warn","storedValue","setStoredValue","useEffect","handleStorageChange","addEventListener","removeEventListener","newValue","Function","setItem","stringify","dispatchEvent","Event","filterClusters","timeBuffer","userData","prevTime","thresholdTime","filteredData","finalTime","Date","x","filter","index","currentTime","getTime","curDate","sleep","ms","Promise","resolve","setTimeout","Header","div","StyledBackground","StyledContainer","Container","Graph","ready","labelData","chartData","Grid","container","justify","CircularProgress","fromEntries","id","checked","setChecked","handleCheck","event","target","idToIndex","displayData","setDisplayData","elevation","FormGroup","row","FormControlLabel","control","Checkbox","label","App","setChartData","setLabelData","setReady","setColors","fetch","d","json","labels","originalColors","direction","alignContent","alignItems","spacing","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5e4b78d4.chunk.js","sourcesContent":["import React, {useLayoutEffect} from 'react';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core';\nimport {createGlobalStyle} from 'styled-components';\nimport rawThemes from './themes.json';\n\ntype MyThemeProviderProps = {\n  children?: React.ReactNode;\n  themeString: string;\n};\n\ntype themeType = {\n  '--bg-color'?: string;\n  '--main-color'?: string;\n  '--caret-color'?: string;\n  '--sub-color'?: string;\n  '--text-color'?: string;\n  '--error-color'?: string;\n  '--error-extra-color'?: string;\n  '--colorful-error-color'?: string;\n  '--colorful-error-extra-color'?: string;\n};\n\nconst themes: {\n  [key: string]: themeType;\n} = rawThemes;\n\nconst get = (key: string) =>\n  getComputedStyle(document.documentElement).getPropertyValue(key).trim();\n\nconst set = (key: string, value: string) =>\n  document.documentElement.style.setProperty(key, value);\n\nconst MyThemeProvider = ({children, themeString}: MyThemeProviderProps) => {\n  const GlobalStyle = createGlobalStyle`\n    html {\n        --bg-color: #323437;\n        --main-color: #e2b714;\n        --caret-color: #e2b714;\n        --sub-color: #646669;\n        --text-color: #d1d0c5;\n        --error-color: #ca4754;\n        --error-extra-color: #7e2a33;\n        --colorful-error-color: #ca4754;\n        --colorful-error-extra-color: #7e2a33;\n        transition-duration: 1s;\n    }\n    \n    body {\n      background: var(--bg-color);\n    }\n  `;\n  const [theme, setTheme] = React.useState(createMuiTheme());\n\n  useLayoutEffect(() => {\n    // set the theme based on themeString\n    if (themes[themeString]) {\n      Object.entries(themes[themeString]).map((value: [string, string]) =>\n        set(value[0], value[1]),\n      );\n    }\n\n    const cssTheme = createMuiTheme({\n      palette: {\n        primary: {\n          main: get('--main-color'),\n          contrastText: get('--text-color'),\n        },\n        background: {\n          default: get('--bg-color'),\n          paper: get('--bg-color'),\n        },\n        secondary: {\n          main: get('--caret-color'),\n          contrastText: get('--text-color'),\n        },\n        error: {\n          main: get('--error-color'),\n          contrastText: get('--text-color'),\n        },\n        warning: {\n          main: get('--colorful-error-color'),\n          contrastText: get('--text-color'),\n        },\n        info: {\n          main: get('--colorful-error-color'),\n          contrastText: get('--text-color'),\n        },\n        text: {\n          primary: get('--text-color'),\n          secondary: get('--sub-color'),\n          disabled: get('--sub-color'),\n          hint: get('--sub-color'),\n        },\n      },\n    });\n\n    setTheme(cssTheme);\n  }, [themeString]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle /> {children}\n    </ThemeProvider>\n  );\n};\n\nexport default MyThemeProvider;\n","import React from 'react';\nimport {ResponsiveLine, PointTooltip, Point} from '@nivo/line';\nimport styled from 'styled-components';\nimport {Card, CardContent, Typography} from '@material-ui/core';\nexport type LineGraphData = {\n  id: string;\n  data: LineGraphDataPoint[];\n};\n\nexport type LineGraphDataPoint = {\n  x: string;\n  y: number;\n};\n\nconst theme = {\n  background: 'var(--bg-color)',\n  textColor: 'var(--main-color)',\n  fontSize: 16,\n  axis: {\n    domain: {\n      line: {\n        stroke: 'var(--sub-color)',\n        strokeWidth: 1,\n      },\n    },\n    ticks: {\n      line: {\n        stroke: 'var(--sub-color)',\n        strokeWidth: 1,\n      },\n    },\n  },\n  grid: {\n    line: {\n      stroke: 'var(--sub-color)',\n      strokeWidth: 1,\n    },\n  },\n  crosshair: {\n    line: {\n      stroke: 'var(--sub-color)',\n    },\n  },\n};\n\nconst StyledToolTip = styled(Card)`\n  background: var(--bg-color);\n  color: var(--main-color);\n  // pointer-events: none;\n  // width: 200px;\n  // height: 100px;\n`;\nconst CustomTooltip: PointTooltip = ({point}: { point: Point }) => (\n  <StyledToolTip>\n    <CardContent>\n      <Typography>\n        <span style={{color: point.serieColor}}>[</span>\n        {point.serieId}\n        <span style={{color: point.serieColor}}>]</span>\n      </Typography>\n      <Typography variant=\"h5\">{point.data.yFormatted}</Typography>\n      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n        {point.data.xFormatted}\n      </Typography>\n      {/* {point.y} */}\n    </CardContent>\n  </StyledToolTip>\n  // <></>\n);\n\nconst LineGraph = ({\n  data,\n  colors,\n}: {\n  data: LineGraphData[];\n  colors: string[];\n}) => {\n  return (\n    <div style={{height: '70vh'}}>\n      <ResponsiveLine\n        data={data}\n        animate={true}\n        useMesh={true}\n        // enableSlices={\"x\"}\n        // enableCrosshair={true}\n        // debugMesh={true}\n        margin={{top: 50, right: 50, bottom: 50, left: 100}}\n        xScale={{format: '%Y-%m-%dT%H:%M:%S.%L', type: 'time'}}\n        xFormat=\"time:%Y-%m-%d (%H:%M:%S)\"\n        yScale={{type: 'linear', stacked: false, min: 0, max: 'auto'}}\n        curve=\"natural\"\n        theme={theme}\n        tooltip={CustomTooltip}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          // tickValues: \"every 1 day\",\n          // tickSize: 5,\n          // tickPadding: 5,\n          // tickRotation: 30,\n          format: '%y-%m-%d',\n          legend: 'Time',\n          legendOffset: 40,\n          legendPosition: 'middle',\n        }}\n        axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          format: '',\n          legend: 'Score',\n          legendOffset: -80,\n          legendPosition: 'middle',\n        }}\n        // colors={{scheme: 'spectral'}}\n        // colors={[\"#03C8B1\", \"#5AA8FF\", \"#D44086\", \"#EC9936\", \"#FFCC00\"]}\n        colors={colors}\n        pointColor={{from: 'color'}}\n        pointBorderWidth={1}\n        pointBorderColor={{from: 'serieColor'}}\n        enablePointLabel={false}\n        pointLabel=\"xFormatted\"\n        pointLabelYOffset={-12}\n      />\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  DialogActions,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n  Typography,\n} from '@material-ui/core';\n\nimport themesList from '../../themes/_list.json';\n\ntype SettingsDialogProps = {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  theme: string;\n  handleChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n};\n\ntype themesType = {\n  name: string;\n  bgColor: string;\n  textColor: string;\n};\n\nconst SettingsDialog = ({\n  open,\n  setOpen,\n  theme,\n  handleChange,\n}: SettingsDialogProps) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n      scroll={'body'}\n      fullWidth={true}\n      maxWidth={'md'}\n    >\n      <DialogTitle>\n        <Typography variant=\"h5\" color=\"primary\">\n          Settings\n        </Typography>\n      </DialogTitle>\n      <DialogContent dividers={true}>\n        <DialogContentText>\n          <Typography variant=\"h6\" color=\"primary\">\n            About us:\n          </Typography>\n          <Typography>\n            Daisuki Dashboard is an open source project aiming to bring more\n            statistics and data to the Daisuki Discord Bot game.\n          </Typography>\n          <Typography variant=\"h6\" color=\"primary\">\n            Select Theme:\n          </Typography>\n          <Select value={theme} onChange={handleChange}>\n            {themesList\n                .sort((lhs: themesType, rhs: themesType) =>\n                lhs.name > rhs.name ? 1 : rhs.name > lhs.name ? -1 : 0,\n                )\n                .map((theme: themesType) => (\n                  <MenuItem\n                    style={{color: theme.textColor, background: theme.bgColor}}\n                    value={theme.name}\n                    key={theme.name}\n                  >\n                    {theme.name}\n                  </MenuItem>\n                ))}\n          </Select>\n          <Typography variant=\"h6\" color=\"primary\">\n            Creators:\n          </Typography>\n          <ul>\n            <li>\n              <Typography>\n                <Link href=\"https://github.com/xpire\">xpire</Link>\n              </Typography>\n            </li>\n            <li>\n              <Typography>\n                <Link href=\"https://github.com/DrFacepalm\">DrFacepalm</Link>\n              </Typography>\n            </li>\n          </ul>\n          <Typography variant=\"h6\" color=\"primary\">\n            Source:\n          </Typography>\n          <Typography>\n            <Link href=\"https://github.com/DrFacepalm/DaisukiDashboard\">\n              https://github.com/DrFacepalm/DaisukiDashboard\n            </Link>\n          </Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setOpen(false)}>Exit</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SettingsDialog;\n","const fillRepeatArray = (a: string[], length: number) => {\n  if (a.length >= length) {\n    return a.slice(0, length);\n  } else {\n    const repeats = Math.ceil(length / a.length);\n    return Array.from({length: repeats}, () => a)\n        .flat()\n        .slice(0, length);\n  }\n};\n\nexport default fillRepeatArray;\n","import {Dispatch, SetStateAction, useEffect, useState} from 'react';\n\nfunction useLocalStorage<T>(\n    key: string,\n    initialValue: T | (() => T),\n): [T, Dispatch<SetStateAction<T>>] {\n  // Get from local storage then\n  // parse stored json or return initialValue\n  const readValue = () => {\n    // Prevent build error \"window is undefined\" but keep keep working\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  };\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: Dispatch<SetStateAction<T>> = (value) => {\n    // Prevent build error \"window is undefined\" but keeps working\n    if (typeof window == 'undefined') {\n      console.warn(\n          `Tried setting localStorage key “${key}” even though environment is not a client`,\n      );\n    }\n\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const newValue = value instanceof Function ? value(storedValue) : value;\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n\n      // Save state\n      setStoredValue(newValue);\n\n      // We dispatch a custom event so every useLocalStorage hook are notified\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  };\n\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, []);\n\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue());\n    };\n\n    // this only works for other documents, not the current one\n    window.addEventListener('storage', handleStorageChange);\n\n    // this is a custom event, triggered in writeValueToLocalStorage\n    window.addEventListener('local-storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('local-storage', handleStorageChange);\n    };\n  }, []);\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import type {ChartEntry, ChartData} from '../types';\n\nconst filterClusters = (data: ChartData, timeBuffer: number):ChartData => {\n  const newdata = data.map((userData) => {\n    let prevTime:Date;\n    let thresholdTime:Date;\n    const filteredData: ChartEntry = userData;\n    const finalTime = new Date(userData.data[userData.data.length-1].x);\n    filteredData.data = userData.data.filter(({x}, index)=> {\n      if (index === userData.data.length - 1) {\n        return true;\n      }\n      const currentTime = new Date(x);\n      if ((finalTime.getTime() - currentTime.getTime()) < timeBuffer) {\n        return false;\n      }\n      if (!prevTime) {\n        prevTime = new Date(x);\n        thresholdTime = new Date(prevTime.getTime() + timeBuffer);\n        return true;\n      }\n      const curDate = new Date(x);\n      if (curDate >= thresholdTime) {\n        prevTime = curDate;\n        thresholdTime = new Date(prevTime.getTime() + timeBuffer);\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return filteredData;\n  });\n  return newdata;\n};\n\nexport default filterClusters;\n","function sleep(ms: number) {\n  return new Promise( (resolve) => setTimeout(resolve, ms) );\n}\n\nexport default sleep;\n","import type {ChartData} from './types';\n\nimport styled from 'styled-components';\nimport React, {useState, useEffect} from 'react';\nimport ThemeProvider from './themes/ThemeProvider';\nimport LineGraph from './components/nivo/LineGraph';\nimport SettingsDialog from './components/settings/SettingsDialog';\n\nimport {CircularProgress} from '@material-ui/core';\n\nimport {\n  Typography,\n  Container,\n  Card,\n  Grid,\n  Button,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\nimport {useLocalStorage, fillRepeatArray, filterClusters, sleep} from './utils';\n\n\nconst Header = styled.div`\n  padding: 40px 0px;\n`;\n\nconst StyledBackground = styled.div`\n  background: var(--bg-color);\n  min-height: 100vh;\n  max-width: 100vw;\n`;\n\nconst StyledContainer = styled(Container)`\n  overflow-x: clip;\n`;\n\ninterface GraphProps {\n  ready: boolean;\n  labelData: Array<string>;\n  chartData: ChartData;\n  colors: Array<string>;\n}\n\nfunction Graph({ready, labelData, chartData, colors}: GraphProps) {\n  if (!ready) {\n    return (<Grid container justify=\"center\" style={{'marginTop': '15vh'}}>\n      <Grid item>\n        <CircularProgress />\n      </Grid>\n    </Grid>\n    );\n  }\n  const [checked, setChecked] = useState(\n      Object.fromEntries(labelData.map((id) => [id, true])),\n  );\n  const handleCheck = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked({...checked, [event.target.name]: event.target.checked});\n  };\n  const idToIndex = Object.fromEntries(\n      labelData.map((id, index) => [id, index]),\n  );\n\n  const [displayData, setDisplayData] = useState(chartData);\n\n  useEffect(() => {\n    setDisplayData(chartData.filter(({id}) => checked[id]));\n  }, [checked]);\n\n  return (\n    <div>\n      <Card elevation={0}>\n        <FormGroup row>\n          {labelData.map((id) => (\n            <FormControlLabel\n              key={id}\n              control={\n                <Checkbox\n                  checked={checked[id]}\n                  onChange={handleCheck}\n                  name={id}\n                  style={{color: colors[idToIndex[id]]}}\n                />\n              }\n              label={<Typography>{id}</Typography>}\n            />\n          ))}\n        </FormGroup>\n      </Card>\n      <LineGraph data={displayData} colors={colors} />;\n    </div>\n  );\n}\n\n\nfunction App() {\n  const [theme, setTheme] = useLocalStorage('theme', '8008');\n  const [chartData, setChartData] = useState([] as ChartData);\n  const [labelData, setLabelData] = useState([] as Array<string>);\n  const [open, setOpen] = useState(false);\n  const [ready, setReady] = useState(false);\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setTheme(event.target.value as string);\n  };\n\n  const [colors, setColors] = useState([] as Array<string>);\n\n  useEffect(() => {\n    const x = async () => {\n      const d = await fetch('http://13.238.204.77:4433/tp_scores');\n      const data = filterClusters(await d.json(), 12*60*60*1000);\n      await sleep(1000);\n      const labels = data.map(({id}) => id);\n      const originalColors = fillRepeatArray(\n          [\n            '#9e0142',\n            '#d53e4f',\n            '#f46d43',\n            '#fdae61',\n            '#fee08b',\n            '#ffffbf',\n            '#e6f598',\n            '#abdda4',\n            '#66c2a5',\n            '#3288bd',\n            '#5e4fa2',\n          ], // from nivo colors \"spectral\"\n          labels.length,\n      );\n\n      setColors(originalColors);\n      setChartData(data);\n      setLabelData(labels);\n      setReady(true);\n    };\n    x();\n  }, []);\n\n  return (\n    <ThemeProvider themeString={theme}>\n      <StyledBackground>\n        <SettingsDialog\n          open={open}\n          setOpen={setOpen}\n          theme={theme}\n          handleChange={handleChange}\n        />\n        <StyledContainer maxWidth=\"xl\">\n          <Header>\n            <Card elevation={0}>\n              <Grid\n                container\n                direction=\"row\"\n                alignContent=\"space-between\"\n                alignItems=\"flex-end\"\n                spacing={2}\n              >\n                <Grid item>\n                  <Typography variant=\"h3\">Daisuki Dashboard</Typography>\n                </Grid>\n                <Grid item>\n                  <Button onClick={() => setOpen(true)}>Settings</Button>\n                </Grid>\n              </Grid>\n              <Typography variant=\"subtitle1\">\n                Custom Dashboard for Daisuki, The Ultimate Character Collection\n                Game!\n              </Typography>\n            </Card>\n          </Header>\n          <Graph chartData={chartData} labelData={labelData} ready={ready} colors={colors}/>\n          <Card elevation={0}></Card>\n        </StyledContainer>\n      </StyledBackground>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}